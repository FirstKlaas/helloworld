/*****************************************************************************
* Der Raster Interrupt, der den Framecounter runterzählt.
* Wenn der Framecounter bei 0 angekommen ist, dann wird die gesmte
* Szene aktualisi ert und der Counter reinitialisiert. Der Wert für
* den Gamecounter ist GAME_SPEED.
*****************************************************************************/
raster_irq:
    lda IRQSTATUS
    bmi do_raster_irq
    lda $dc0d                          // sonst, CIA-IRQ bestätigen  
    cli                                // IRQs erlauben
    jmp $ea31

do_raster_irq:
    lda IRQ_RASTERLINE

    // Bestätigen, dass der IRQ behandelt wurde
    sta IRQSTATUS    
    jsr JOYSTICK.check      // Ergebnisse liegen in JoyXDirection und
    lda #0
    rol                     // Fire Button in Akku schieben
    sta JoyFireButton       // In der Zero Page ablegen 
    clc                     // Carry bit löschen, weil bas bit
                            // noch gesetzt ist, wenn der Feuer
                            // Knopf nicht gedrückt ist

    // Framecounter um 1 verringern
    // Wenn 0 erreicht ist, dann die Szene
    // aktualisieren.
    // Dies sollte in dem Raster IRQ erfolgen, der den meisten zeitlicher Puffer hat.
    ldy FrameCounter
    dey
    sty FrameCounter
    bne !exit+

    // Framecounter auf 0 gegangen.
    // Neu setzen
    lda #GAME_SPEED
    sta FrameCounter

    // Komplette Szenen neu berechnen
    jsr KI.update                   // Die Logik der einzelnen Sprites verrechnen
    jsr SPRITES.update_positions    // Neue Position berechnen (in virtuellen Daten)
    jsr SPRITES.convert_virtual_xy  // Virtuelle auf reale Positionen mappen
    
    jsr GAME.update_vic             // Neuen Stand in VIC schreiben
    lda IRQ_RASTERLINE
.break
    FAST_RASTER_IRQ(second_irq, $D0)
!exit:
    RETURN_FROM_IRQ()
